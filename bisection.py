# -*- coding: utf-8 -*-
"""Bisection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KkdYIN9kbPQzUs5qsewiNfTqzh9vTo6j
"""

def bisection_method_for_range(func, a, b, tol=1e-6, max_iter=100):
    if func(a) * func(b) > 0:
        raise ValueError("The function values at the endpoints must have different signs.")

    iter_count = 0
    while (b - a) / 2 > tol and iter_count < max_iter:
        c = (a + b) / 2
        if func(c) == 0:
            break
        elif func(c) * func(a) < 0:
            b = c
        else:
            a = c

        iter_count += 1

    return (a + b) / 2

def example_function(x):
    return x**2 - 4

a = 0
b = 3

root = bisection_method_for_range(example_function, a, b)

print(f"Approximate root in the interval [{a}, {b}]: {root}")